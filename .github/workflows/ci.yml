name: CI

on:
  push:
    branches: ['master']
    paths: ['**.go','go.sum','go.mod','Makefile','Dockerfile','.dockerignore','.github/workflows/ci.yml','pkg/**']
  pull_request:
    branches: ["master"]

env:
  REGISTRY_DOCKERHUB: registry.hub.docker.com
  REGISTRY_GITHUB: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_PLATFORM: linux/amd64,linux/386
  IMAGE_PLATFORM_PKG_RPM: linux/amd64
  ARTIFACTS_PATH: /tmp/artifact
  VERSION_LAST: ${{ github.ref_name }}
  VERSION_NEW: ${{ github.ref_name }}

jobs:
  init:
    name: Init CI
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      version: ${{ steps.set-version.outputs.VERSION }}
    steps:
      - name: üîç Checkout repository
        uses: actions/checkout@v4.2.2
      - name: Get last version
        id: get-version-last
        run: |
          gh release list --json tagName,isLatest -q '.[]|select(.isLatest==true)|.tagName' |sed 's/v/version=/' >> "$GITHUB_ENV"
      - name: Set version
        id: set-version
        run: |
          echo VERSION=`sed "s/master/$version/" <<< ${{ github.ref_name }}` >> "$GITHUB_OUTPUT"
       

  build:
    name: Build image and bin
    needs: init
    runs-on: ubuntu-latest
    steps:
      - name: üîç Checkout repository
        uses: actions/checkout@v4.2.2
      - name: ‚öôÔ∏è Preparatory stage
        run: |
          mkdir -p ${{ env.ARTIFACTS_PATH }}/images \
            ${{ env.ARTIFACTS_PATH }}/cache \
            ${{ env.ARTIFACTS_PATH }}/bin \
            ${{ env.ARTIFACTS_PATH }}/asset \
            ${{ env.ARTIFACTS_PATH }}/pkg
      - name: ‚öôÔ∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.8.0
      - name: üåÄ Build and export
        uses: docker/build-push-action@v6
        with:
          tags: losenmann/iptv-toolkit:latest
          platforms: ${{ env.IMAGE_PLATFORM }}
          cache-to: type=local,dest=${{ env.ARTIFACTS_PATH }}/cache
          outputs: type=local,dest=${{ env.ARTIFACTS_PATH }}/images
      - name: üß¨ Extract executable file
        working-directory: ${{ env.ARTIFACTS_PATH }}/images
        run: |
          cp -vf ./*/usr/bin/iptv-toolkit-* ../bin/
          cp -vf ./*/usr/bin/iptv-toolkit-* ../asset/
      - name: üì¶ Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact
          path: ${{ env.ARTIFACTS_PATH }}

  build-pkg:
    name: Build packages Linux distros
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: üîç Checkout repository
        uses: actions/checkout@v4.2.2
      - name: ‚öôÔ∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.8.0
      - name: üì¶ Download artifact
        uses: actions/download-artifact@v4
        with:
          name: artifact
          path: artifact
      - name: üåÄ Build and export RHEL package
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./build-tools/rhel.Dockerfile
          platforms: ${{ env.IMAGE_PLATFORM_PKG_RPM }}
          outputs: |
            type=local,dest=./artifact/pkg
            type=local,dest=./artifact/asset
          build-args: |
            PKG_VERSION=${{ needs.init.outputs.version }}
            PKG_MAINTAINER=${{ github.actor }}
      - name: üì¶ Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact
          path: ./artifact
          overwrite: true

  testing:
    name: Testing image
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: üîç Checkout repository
        uses: actions/checkout@v4.2.2
      - name: üì¶ Download artifact
        uses: actions/download-artifact@v4
        with:
          name: artifact
          path: ${{ env.ARTIFACTS_PATH }}
      - name: üåÄ Import image
        uses: docker/build-push-action@v6
        with:
          cache-from: type=local,src=${{ env.ARTIFACTS_PATH }}/cache
          load: true
      - name: ‚ö°Ô∏è Run container
        run: |
          docker compose -f ./deploy/docker-compose.yaml --env-file ./testing/testing.env up -d
      - name: üöÄÔ∏è Run tests
        run: |
          sleep 15s
          make testing

  push:
    if: startsWith(github.ref, 'refs/tags/v')
    name: Push image to registry
    needs: [build-pkg, testing]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: ‚öôÔ∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.8.0
      - name: üîë Login to Docker Hub
        uses: docker/login-action@v3.3.0
        with:
          registry: ${{ env.REGISTRY_DOCKERHUB }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: üîë Login to GitHub Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ${{ env.REGISTRY_GITHUB }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: üì¶ Download artifact
        uses: actions/download-artifact@v4
        with:
          name: artifact
          path: ${{ env.ARTIFACTS_PATH }}
      - name: üìù Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.6.1
        with:
          images: |
            ${{ env.REGISTRY_DOCKERHUB }}/${{ github.repository }}
            ${{ env.REGISTRY_GITHUB }}/${{ github.repository }}
          tags: |
            type=raw,value=latest,priority=100,enable=true
            type=semver,pattern={{version}},priority=200,enable=true
            type=sha,prefix=sha-,suffix=,format=short,priority=300,enable=true
      - name: üìå Push Docker image
        uses: docker/build-push-action@v6.10.0
        with:
          tags: ${{ steps.meta.outputs.tags }}
          platforms: ${{ env.IMAGE_PLATFORM }}
          cache-from: type=local,src=${{ env.ARTIFACTS_PATH }}/cache
          push: true
          provenance: false

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    name: Create release
    needs: [build-pkg, testing]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: üì¶ Download artifact
        uses: actions/download-artifact@v4
        with:
          name: artifact
          path: ${{ env.ARTIFACTS_PATH }}
      - name: üßÆ Calculation of Checksums
        working-directory: ${{ env.ARTIFACTS_PATH }}/asset
        run: |
          sha256sum * > sha256sums
      - name: üè∑ Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
        run: |
          gh release create \
              --repo="$GITHUB_REPOSITORY" \
              --title="${GITHUB_REPOSITORY#*/} ${tag#v}" \
              --generate-notes \
              "$tag" \
              ${{ env.ARTIFACTS_PATH }}/asset/*