name: CI

on:
  workflow_dispatch:
  push:
    branches: ['master']
    paths: ['**.go','go.sum','go.mod','Makefile','Dockerfile','.dockerignore','.github/workflows/ci.yml','pkg/**']
    tags:
      - 'v[0-9].[0-9]+.[0-9]+'
  pull_request:
    branches: ["master"]

env:
  REGISTRY_DOCKERHUB: registry.hub.docker.com
  REGISTRY_GITHUB: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  ARTIFACTS_PATH: /tmp/artifact

jobs:
  init:
    name: Init CI
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      user_id: ${{ steps.set-var.outputs.user_id }}
      group_id: ${{ steps.set-var.outputs.group_id }}
      version: ${{ steps.set-var.outputs.version }}
      arch_main: ${{ steps.set-var.outputs.arch_main }}
      arch_deb: ${{ steps.set-var.outputs.arch_deb }}
      arch_rpm: ${{ steps.set-var.outputs.arch_rpm }}
    steps:
      - name: üîç Checkout repository
        uses: actions/checkout@v4.2.2
      - name: Set version
        id: set-var
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          id -u |sed 's/^/user_id=/' >> "$GITHUB_OUTPUT"
          id -g |sed 's/^/group_id=/' >> "$GITHUB_OUTPUT"
          version=`gh repo view --json latestRelease -q '.latestRelease.tagName' |sed 's/^v//'`
          sed -e "/v[0-9]*.[0-9]*.[0-9]*/s/=v/=/" -e "s/master/$version/" <<< `echo "version=${{ github.ref_name }}"` >> "$GITHUB_OUTPUT"
          if [[ ${{ github.ref_name }} == master ]]; \
          then \
            echo arch_main=linux/amd64 >> "$GITHUB_OUTPUT"; \
            echo arch_deb=linux/amd64 >> "$GITHUB_OUTPUT"; \
            echo arch_rpm=linux/amd64 >> "$GITHUB_OUTPUT"; \
          else \
            echo arch_main=linux/386,linux/amd64,linux/arm,linux/arm64,linux/mips64le,linux/ppc64le,linux/riscv64,linux/s390x,windows/386,windows/amd64,windows/arm,windows/arm64 >> "$GITHUB_OUTPUT"; \
            echo arch_deb=linux/386,linux/amd64,linux/arm,linux/arm64,linux/mips64le,linux/ppc64le,linux/riscv64,linux/s390x >> "$GITHUB_OUTPUT"; \
            echo arch_rpm=linux/amd64,linux/arm64,linux/ppc64le,linux/s390x >> "$GITHUB_OUTPUT"; \
          fi

  build:
    name: Build image and bin
    needs: init
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: üîç Checkout repository
        uses: actions/checkout@v4.2.2
      - name: ‚öôÔ∏è Preparatory stage
        run: |
          mkdir -p ${{ env.ARTIFACTS_PATH }}/images \
            ${{ env.ARTIFACTS_PATH }}/cache \
            ${{ env.ARTIFACTS_PATH }}/bin \
            ${{ env.ARTIFACTS_PATH }}/asset \
            ${{ env.ARTIFACTS_PATH }}/pkg
      - name: ‚öôÔ∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5
      - name: üåÄ Build and export cache
        uses: docker/build-push-action@ca877d9245402d1537745e0e356eab47c3520991
        with:
          context: .
          file: ./Dockerfile
          provenance: false
          tags: losenmann/iptv-toolkit:latest
          platforms: ${{ needs.init.outputs.arch_main }}
          cache-to: type=local,dest=${{ env.ARTIFACTS_PATH }}/cache
          outputs: |
            type=local,dest=${{ env.ARTIFACTS_PATH }}/images
            type=docker,dest=${{ env.ARTIFACTS_PATH }}/images/image.tar
      - name: üß¨ Extract executable file
        working-directory: ${{ env.ARTIFACTS_PATH }}/images
        run: |
          find ./ -type f -regex '.*/iptv-toolkit-.*' -exec cp -v {} ../bin \;
          find ./ -type f -regex '.*/iptv-toolkit-.*' -exec cp -v {} ../asset \;
      - name: üì¶ Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact
          path: ${{ env.ARTIFACTS_PATH }}

  build-pkg:
    name: Build packages Linux distros
    needs: [init, build]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: üîç Checkout repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: üîç Fetch tags
        run: |
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - name: üì¶ Download artifact
        uses: actions/download-artifact@v4
        with:
          name: artifact
          path: ./artifact
      - name: ‚öôÔ∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5
      - name: üåÄ Build APK package
        uses: docker/build-push-action@ca877d9245402d1537745e0e356eab47c3520991
        env:
          DOCKER_BUILDKIT: 1
        with:
          context: .
          file: ./pkg/Dockerfile.alpine
          provenance: false
          platforms: ${{ needs.init.outputs.arch_apk }}
          outputs: |
            type=local,dest=./artifact/images
          build-args: |
            PKG_MAINTAINER=${{ needs.init.outputs.username }}
            PKG_MAINTAINER_EMAIL=${{ needs.init.outputs.useremail }}
            PKG_VERSION=${{ needs.init.outputs.version }}
            PKG_USER=${{ needs.init.outputs.user_id }}
            PKG_GROUP=${{ needs.init.outputs.group_id }}
            PKG_SIGN_ALPINE=${{ secrets.PKG_SIGN_ALPINE }}
      - name: üåÄ Build DEB package
        uses: docker/build-push-action@ca877d9245402d1537745e0e356eab47c3520991
        env:
          DOCKER_BUILDKIT: 1
        with:
          context: .
          file: ./pkg/Dockerfile.debian
          provenance: false
          platforms: ${{ needs.init.outputs.arch_deb }}
          outputs: |
            type=local,dest=./artifact/images
          build-args: |
            PKG_MAINTAINER=${{ needs.init.outputs.username }}
            PKG_MAINTAINER_EMAIL=${{ needs.init.outputs.useremail }}
            PKG_VERSION=${{ needs.init.outputs.version }}
            PKG_USER=${{ needs.init.outputs.user_id }}
            PKG_GROUP=${{ needs.init.outputs.group_id }}
      - name: üåÄ Build RPM package
        uses: docker/build-push-action@ca877d9245402d1537745e0e356eab47c3520991
        env:
          DOCKER_BUILDKIT: 1
        with:
          context: .
          file: ./pkg/Dockerfile.rhel
          provenance: false
          platforms: ${{ needs.init.outputs.arch_rpm }}
          outputs: |
            type=local,dest=./artifact/images
          build-args: |
            PKG_MAINTAINER=${{ needs.init.outputs.username }}
            PKG_MAINTAINER_EMAIL=${{ needs.init.outputs.useremail }}
            PKG_VERSION=${{ needs.init.outputs.version }}
            PKG_USER=${{ needs.init.outputs.user_id }}
            PKG_GROUP=${{ needs.init.outputs.group_id }}
      - name: üß¨ Extract packages
        working-directory: ./artifact/images
        run: |
          mkdir ../pkg
          find ./ -type f -regex '.*.deb\|.*.rpm' -exec cp -v {} ../pkg \;
          find ./ -type f -regex '.*.deb\|.*.rpm' -exec cp -v {} ../asset \;
      - name: üì¶ Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact
          path: ./artifact
          overwrite: true

  testing:
    name: Testing image
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: üîç Checkout repository
        uses: actions/checkout@v4.2.2
      - name: üì¶ Download artifact
        uses: actions/download-artifact@v4
        with:
          name: artifact
          path: ${{ env.ARTIFACTS_PATH }}
      - name: ‚ö°Ô∏è Load container
        run: |
          docker load --input ${{ env.ARTIFACTS_PATH }}/images/image.tar
      - name: üöÄÔ∏è Run tests
        run: |
          make testing

  push:
    if: startsWith(github.ref, 'refs/tags/v')
    name: Push image to registry
    needs: [init, build-pkg, testing]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: ‚öôÔ∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5
      - name: üîë Login to Docker Hub
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567
        with:
          registry: ${{ env.REGISTRY_DOCKERHUB }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: üîë Login to GitHub Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567
        with:
          registry: ${{ env.REGISTRY_GITHUB }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: üì¶ Download artifact
        uses: actions/download-artifact@v4
        with:
          name: artifact
          path: ${{ env.ARTIFACTS_PATH }}
      - name: üìù Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@369eb591f429131d6889c46b94e711f089e6ca96
        with:
          images: |
            ${{ env.REGISTRY_DOCKERHUB }}/${{ github.repository }}
            ${{ env.REGISTRY_GITHUB }}/${{ github.repository }}
          tags: |
            type=raw,value=latest,priority=100,enable=true
            type=semver,pattern={{version}},priority=200,enable=true
            type=sha,prefix=sha-,suffix=,format=short,priority=300,enable=true
      - name: üìå Push Docker image
        uses: docker/build-push-action@ca877d9245402d1537745e0e356eab47c3520991
        with:
          tags: ${{ steps.meta.outputs.tags }}
          platforms: ${{ needs.init.outputs.arch_main }}
          cache-from: type=local,src=${{ env.ARTIFACTS_PATH }}/cache
          push: true
          provenance: false

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    name: Create release
    needs: [init, build-pkg, testing]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: üîç Checkout repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: üì¶ Download artifact
        uses: actions/download-artifact@v4
        with:
          name: artifact
          path: ${{ env.ARTIFACTS_PATH }}
      - name: Export public package signing keys
        working-directory: ${{ env.ARTIFACTS_PATH }}/asset
        run: |
          printf "${{ secrets.PKG_SIGN_ALPINE }}" |base64 -d |openssl rsa -pubout -out ./sign_pkg_alpine_losenmann.pub
      - name: üßÆ Calculation of Checksums
        working-directory: ${{ env.ARTIFACTS_PATH }}/asset
        run: |
          sha256sum * > sha256sums
      - name: üè∑ Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.init.outputs.version }}
        run: |
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
          gh release create \
            -t v${VERSION} \
            --notes-from-tag v${VERSION} \
            --verify-tag \
            --latest \
            ${{ env.ARTIFACTS_PATH }}/asset/*
