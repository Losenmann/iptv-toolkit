name: CI

on:
  push:
    branches: ['master']
    paths: ['**.go','go.sum','go.mod']
  pull_request:
    branches: ["master"]

env:
  REGISTRY_DOCKERHUB: registry.hub.docker.com
  REGISTRY_GITHUB: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_PLATFORM: linux/386,linux/amd64,linux/arm/v6

jobs:
  build:
    name: Build image
    runs-on: ubuntu-latest
    steps:
      - name: 🔍 Checkout repository
        uses: actions/checkout@v4.2.2
      - name: ⚙️ Preparatory stage
        run: |
          mkdir -p /tmp/artifact/cache /tmp/artifact/bin
      - name: ⚙️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.8.0
      - name: 🌀 Build and export
        uses: docker/build-push-action@v6
        with:
          tags: losenmann/iptv-toolkit:latest
          platforms: ${{ env.IMAGE_PLATFORM }}
          cache-to: type=local,dest=/tmp/artifact/cache
          outputs: type=local,dest=/tmp/artifact/images
      - name: 🧬 Extract executable file
        working-directory: /tmp/artifact/bin
        run: |
          mv /tmp/artifact/images/*/usr/bin/iptv-toolkit-* /tmp/artifact/bin/
          sha256sum * > sha256sums
      - name: 📦 Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact
          path: /tmp/artifact

  testing:
    name: Testing image
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 🔍 Checkout repository
        uses: actions/checkout@v4.2.2
      - name: 📦 Download artifact
        uses: actions/download-artifact@v4
        with:
          name: artifact
          path: /tmp/artifact
      - name: 🌀 Import image
        uses: docker/build-push-action@v6
        with:
          cache-from: type=local,src=/tmp/artifact/cache
          load: true
      - name: ▶️ Run container
        run: |
          docker compose -f ./deploy/docker-compose.yaml --env-file ./testing/testing.env up -d
      - name: 🚀️ Run tests
        run: |
          sleep 15s
          make testing

  push:
    if: startsWith(github.ref, 'refs/tags/v')
    name: Push image to repo
    needs: testing
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: ⚙️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.8.0
      - name: 🔑 Login to Docker Hub
        uses: docker/login-action@v3.3.0
        with:
          registry: ${{ env.REGISTRY_DOCKERHUB }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: 🔑 Login to GitHub Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ${{ env.REGISTRY_GITHUB }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: 📦 Download artifact
        uses: actions/download-artifact@v4
        with:
          name: artifact
          path: /tmp/artifact
      - name: 🏷 Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.6.1
        with:
          images: |
            ${{ env.REGISTRY_DOCKERHUB }}/${{ github.repository }}
            ${{ env.REGISTRY_GITHUB }}/${{ github.repository }}
          tags: |
            type=raw,value=latest,priority=100,enable=true
            type=semver,pattern={{version}},priority=200,enable=true
            type=sha,prefix=sha-,suffix=,format=short,priority=300,enable=true
      - name: 📌 Push Docker image
        uses: docker/build-push-action@v6.10.0
        with:
          tags: ${{ steps.meta.outputs.tags }}
          platforms: ${{ env.IMAGE_PLATFORM }}
          cache-from: type=local,src=/tmp/artifact/cache
          push: true
          provenance: false

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    name: Release pushed tag
    needs: testing
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: 📦 Download artifact
        uses: actions/download-artifact@v4
        with:
          name: artifact
          path: /tmp/artifact
      - name: 💽 Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
        run: |
          gh release create \
              --repo="$GITHUB_REPOSITORY" \
              --title="${GITHUB_REPOSITORY#*/} ${tag#v}" \
              --generate-notes \
              "$tag" \
              /tmp/artifact/bin/*